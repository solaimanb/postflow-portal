rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    //==============================================================
    // HELPER FUNCTIONS
    //==============================================================
    
    /**
     * Checks if the current user has admin privileges
     * @return {boolean} True if user is authenticated and has admin role
     */
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)) &&
             get(/databases/$(database)/documents/authorized_users/$(request.auth.token.email)).data.role == 'admin';
    }
    
    /**
     * Checks if the current user is authenticated
     * @return {boolean} True if user is authenticated
     */
    function isAuthenticated() {
      return request.auth != null;
    }
    
    /**
     * Checks if the current user is the owner of the document
     * @param {string} userField - The field in the document that stores the user identifier
     * @return {boolean} True if the authenticated user matches the document's user field
     */
    function isOwner(userField) {
      return isAuthenticated() && 
             request.auth.token.email == resource.data[userField];
    }
    
    //==============================================================
    // DEFAULT RULE - Restrict access to admins only
    //==============================================================
    
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    //==============================================================
    // COLLECTION-SPECIFIC RULES
    //==============================================================
    
    // AUTHORIZED USERS
    match /authorized_users/{email} {
      // Allow reading for authentication purposes
      allow read: if true;
      // Only admins can write to authorized_users
      allow write: if isAdmin();
    }
    
    // TOPICS
    match /topics/{topicId} {
      allow read, write: if isAdmin();
    }
    
    // POSTS
    match /posts/{postId} {
      allow read, write: if isAdmin();
    }
    
    // FACEBOOK PAGES
    // TODO: SECURITY RISK - Change back to proper authentication after debugging
    match /facebook_pages/{pageId} {
      allow read, write: if true; // FOR DEBUGGING ONLY - CHANGE AFTER FIXING
    }
    
    // SCHEDULED POSTS
    match /scheduled_posts/{postId} {
      allow read, write: if true;
    }
  }
} 